@page 
@using System.Net
@model SampleApplication.Pages.ObservationResultsModel
@{ 
    Layout = "_Layout";
    ViewData["Title"]="Observation of a number of active enumeration adapters";
}
<h2 style="margin-bottom: 0.2rem;text-align:center">Session process runner example. Monitoring a number of active enumeration adapter runners.</h2>
<div style="text-align:center;font-size: 1.1em;">
    <span class="annotation">Observing runner number:</span><span>@Model._key.RunnerNumber</span>
    <span class="annotation">Active Session:</span><span>@Model._key.ActiveSessionId:@Model._key.Generation</span>
</div>
<div style="text-align:center;font-size: 1.1em;">
    <span class="annotation">Server status:</span> <span id="back_status">@Model.StartupStatusMessage</span>
</div>
@if(Model._sessionAvailable) {
    <div style="display:flex">
        <div style="display:inline-block; min-width:25rem">
            <h3>Results of poll.</h3>
            <div>
                <span style="margin-left: 10px; font-weight:600"># of active enum. adapters:</span> <span id="runner_result">@Model._result</span>
                <span style="margin-left: 10px; font-weight:600"># of changes:</span> <span id="position">@(Model._position-1)</span>
            </div>
            <div>
                <span style="margin-left: 10px; font-weight:600">Last poll #:</span> <span id="poll_count">0</span>
                <span style="margin-left: 10px; font-weight:600">Last observation runner status:</span> <span id="runner_status">@Model._status</span>
            </div>
        </div>
        <div style="display:inline-block;">
            <h3>Triggers for monitoring changes.</h3>
            <table>
                <thead>
                    <tr><th class="n">#</th><th class="threshold">Fires at</th><th class="state">State</th>
                    <th class="timeout">Timeout(s)</th><th class="action">Action</th></tr>
                </thead>
                <tbody id="triggers">
                    @for(int i=1; i<=3; i++) {
                        <tr>
                            <td class="n">@i</td>
                            <td><input type="number" class="threshold" value="@Model._position" /></td>
                            <td class="state">Ready</td><td><input type="number" class="timeout" value="600"/></td>
                            <td class="action"><button type="button" onclick="triggerButtonClick(event)">Start</button></td>
                        </tr>
                    }
                </tbody>

            </table>
        </div>
    </div>
}

@section Head{
    <script>
        var pollInterval = 1000;
        var runner_key = {
            RunnerNumber: @Model._key.RunnerNumber,
            Generation: @Model._key.Generation,
            _ActiveSessionId: "@(WebUtility.UrlEncode(Model._key.ActiveSessionId))",
            get ActiveSessionId() { return decodeURI(this._ActiveSessionId); }
        },
        runnerAvailable = true;
        var curTimer;
        var count = 0;
        var change_count = @(Model._position-1);

        async function getAvailable() {
            curTimer = undefined;

            let request = {
                RunnerKey: runner_key,
            }

            let response = await fetch("@Model._GetAvailableEndpoint", {
                method: "POST",
                headers: {
                    "Content-type": "application/json;charset=utf-8"
                },
                body: JSON.stringify(request)
            })
            if (response.ok) {
                let result = await response.json();
                runner_status.innerText = result.runnerStatus;
                if (!(result.runnerStatus.toLowerCase() == "progressed" || result.runnerStatus.toLowerCase() == "stalled")) makeRunnerUnavailable();
                let old_change_count = change_count;
                change_count = result.position - 1;
                position.innerText = change_count;
                if (change_count > old_change_count) ajustThresholdPrompts();
                runner_result.innerText = result.result;
                poll_count.innerText = ++count;
                if (!runnerAvailable) back_status.innerText = "Runner completed.";
            }
            else {
                if (response.status == 410) back_status.innerText = "The runner is not availble anymore.";
                else back_status.innerText = "Failed to contact serer, HTTP status code is " + response.status;
                makeRunnerUnavailable();
            }
            schedulePoll();
        }

        function schedulePoll() {
            if (runnerAvailable) {
                curTimer = setTimeout(getAvailable, pollInterval);
            }
        }

        window.onload = schedulePoll;
        window.onunload = function () {
            let request = {
                RunnerKey: runner_key,
            }
            fetch("@Model._AbortEndpoint", {
                method: "POST",
                headers: {
                    "Content-type": "application/json;charset=utf-8"
                },
                keepalive: true,
                body: JSON.stringify(request)
            });
        }

        function assureRowContext(row) {
            if (row.context == undefined) {
                row.context = {
                    name: "Row " + row.querySelector(".n").innerText,
                    state: 0
                }
            }
        }

        function triggerButtonClick(event) {
            /*
            State codes
            -1 - Unavalable
            0 - Idle/Ready
            1 - Waiting
            2 - Displaying state/result
            */
            triggerButton = event.currentTarget;
            row = triggerButton.closest("tr");
            assureRowContext(row);
            switch (row.context.state) {
                case 0: startTriggerWait(row);
                    break;
                case 1: cancelTriggerWait(row);
                    break;
                case 2: reset(row);
                    break;
            }
        }

        var mapCodes = new Map([
            [204,"Aborted"],
            [422,"Invalid"],
            [410,"Unavailable"]
        ]);

        async function startTriggerWait(row) {
            let request = {
                RunnerKey: runner_key,
                Target: +row.querySelector(".threshold").value+1,
                TimeoutSecs: +row.querySelector(".timeout").value,
            }
            row.querySelector(".state").innerText = "Waiting";
            row.querySelector(".threshold").setAttribute("disabled", "");
            row.querySelector(".timeout").setAttribute("disabled", "");
            row.querySelector(".action>button").innerText = "Abort";
            let abort_controller = new AbortController;
            row.context.state = 1;
            row.context.abortController = abort_controller;
            try {
                let response = await fetch("@Model._GetRequiredEndpoint", {
                    method: "POST",
                    headers: {
                        "Content-type": "application/json;charset=utf-8"
                    },
                    signal: abort_controller.signal,
                    body: JSON.stringify(request)
                });
                if (response.status == 200) {
                    let result = await response.json();
                    let outcome = result.runnerStatus;
                    if (outcome.toLowerCase() == "stalled" || outcome.toLowerCase() =="progressed") outcome="Fired"
                    setResult(row, outcome); 
                }
                else setResult(row, mapCodes.get(response.status) ?? response.status);
            }
            catch (error) {
                if (error instanceof AbortError) {
                    setResult(row, "Canceled");
                }
                else {
                    setResult(row, error); 
                }
            }
        }

        function cancelTriggerWait(row) {
            row.context.abortController.abort();
            setResult(row, "Canceled");
        }

        function setResult(row, result) {
            row.context.state = 2;
            row.querySelector(".state").innerText = result;
            row.querySelector(".threshold").setAttribute("disabled", "");
            row.querySelector(".timeout").setAttribute("disabled", "");
            row.querySelector(".action>button").innerText = "Reset";
        }

        function reset(row) {
            if (runnerAvailable) {
                row.context.state = 0;
                adjustAThresholdPrompt(row);
                row.querySelector(".state").innerText = "Ready";
                row.querySelector(".action").removeAttribute("disabled");
                row.querySelector(".threshold").removeAttribute("disabled");
                row.querySelector(".timeout").removeAttribute("disabled");
                row.querySelector(".action>button").innerText = "Start";
            }
            else {
                row.context.state = -1;
                row.querySelector(".state").innerText = "Unavailable";
                row.querySelector(".action").setAttribute("disabled", "");
                row.querySelector(".threshold").setAttribute("disabled", "");
                row.querySelector(".timeout").setAttribute("disabled", "");
                row.querySelector(".action>button").innerText = "Start";
                row.querySelector(".action>button").setAttribute("disabled", "");

            }
        }

        function adjustAThresholdPrompt(row) {
            assureRowContext(row);
            if(row.context.state==0) {
                let thresholdInput = row.querySelector(".threshold");
                let threshold = +thresholdInput.value;
                if (threshold <= change_count) row.querySelector(".threshold").value = change_count + 1;
            }
        }

        function ajustThresholdPrompts() {
            for (let row of triggers.querySelectorAll("tr")) adjustAThresholdPrompt(row);
        }

        function makeRunnerUnavailable() {
            runnerAvailable = false;
            for (let row of triggers.querySelectorAll("tr")) {
                assureRowContext(row);
                if (row.context.state == 1) cancelTriggerWait(row);
                if (row.context.state == 0) reset(row);
            }
        }

    </script>
    <style>
        table {border:thin solid lightgray;border-collapse:collapse;}
        th, td {padding:1px 5px; border:thin solid lightgray;border-collapse:collapse; min-width:6em}
        th.n, td.n {min-width:1em}
        th {background:#eee}
        td {text-align:center}
        td>input {width:3em}
    </style>
}
