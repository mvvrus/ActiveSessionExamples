@page "{key}" 
@using System.Net
@using MVVrus.AspNetCore.ActiveSession
@model SapmleApplication.Pages.SequenceShowResultsModel
@{
    Layout = "_Layout";
    ViewData["Title"]="Sequence runner results";
}
<h2 style="margin-bottom: 0.2rem;text-align:center">Sequence runner example. Parameters and results</h2>
<div style="text-align:center;font-size: 1.1em;">
    Server status: <span id="back_status">@Model.StartupStatusMessage</span>
</div>

@if(Model._params!=null) {
    <div style="display:flex">
        <div id="left_pane" style="display:inline-block; min-width:30%">
            <h3>Example parameters.</h3>
            <div style ="background-color: lightgray;">
                <div style="margin-bottom:0.2em"><b>Mode</b>:@(Model._params.Mode)</div>
                <div style="margin-bottom:0.2em"><b>Max #records at start</b>:@(Model._params.StartCount)</div>
                <div style="margin-bottom:0.2em"><b>Poll interval</b>:@(Model._params.PollInterval.TotalSeconds)s</div>
                <div style="margin-bottom:0.2em"><b>Max #records per poll</b>:
                    @(Model._params.PollMaxCount.HasValue ? Model._params.PollMaxCount.Value.ToString():"not set")</div>
                <div>
                    <div><b>Stages</b>:</div>
                    <table style="margin-left:5px">
                        <tr><th>#</th><th>Iterations:</th><th>Delay:</th><th>Ends at:</th></tr>
                        @if (Model._params.Stages != null) {
                            int num = 0;
                            int end_pos = 0;
                            @foreach (SimStage stage in Model._params.Stages) {
                                <tr><td style="min-width:2em">@(num++)</td><td>@stage.Count</td><td>@(Model.SmartInterval(stage.Delay))</td><td>@(end_pos+=stage.Count)</td></tr>
                            }
                        }
                    </table>
                </div>
            </div>
        </div>
        <div style="display:inline-block;min-width:5em"></div>
        <div style="display:inline-block; min-width:30%">
            <h3 style="text-align:center">Example results.</h3>
            <div>
                <span style="margin-left: 10px; font-weight:600">Status:</span> <span id="runner_status">@Model._status</span>
                <span style="margin-left: 10px; font-weight:600">#Records:</span> <span id="position">@Model._position</span>
            </div>
            <div>
                <span style="margin-left: 10px; font-weight:600">Bkg. progress:</span> <span id="bkg_progress">@Model._bkgProgress</span>
                <span style="margin-left: 10px; font-weight:600">Bkg. is completed:</span> <span id="bkg_completed">@Model._bkgIsCompleted</span>
            </div>
            <div class="records number">Number</div><div class="records name">Name</div><div class="records name">Data</div>
            <table style="display:block;border-style:solid;border-width:thin;height:15em;overflow:auto">
                <tbody id="results_table">
                    @for(int row = 0; row<Model._position; row++) {
                        <tr>
                            <td class="records number">@Model._results[row].Number</td>
                            <td class="records name">@Model._results[row].Name</td>
                            <td class="records data">@Model._results[row].Data</td>
                        </tr>
                    }
                </tbody>
            </table>
            <div>
                <button type="button" onclick=getAvailable()>Test</button>
            </div>
            <div style="width:10em;height:10em">
                <textarea id="test_result"></textarea>
            </div>
        </div>
    </div>
}

@section Head{
    <script>
        var pollInterval = @Model._params?.PollInterval.TotalMicroseconds;
        var runner_key = { 
            RunnerNumber: @Model._key.RunnerNumber,
            Generation: @Model._key.Generation,
            _ActiveSessionId: "@(WebUtility.UrlEncode( Model._key.ActiveSessionId))",
            get ActiveSessionId() { return decodeURI(this._ActiveSessionId); }
        }, 
        Advance = @(Model._params?.PollMaxCount?.ToString()??"null"),
        pollInterval = @Model._params?.PollInterval.TotalMilliseconds,
        pollActive=@(Model._status.IsFinal()?"false":"true");
       
        async function getAvailable()
        {
            let test_result = document.getElementById("test_result");
            let request = {
                RunnerKey: runner_key,
                Advance: Advance
            }
            let responce = await fetch("@Model._GetAvailableEndpoint", {
                method:"POST",
                headers: {
                    "Content-type":"application/json;charset=utf-8"
                },
                body: JSON.stringify(request)
            })
            let result = await responce.json();
            if (responce.ok) 
            {
                runner_status.innerText = result.runnerStatus;
                pollActive = result.runnerStatus.toLowerCase() == "progressed" || result.runnerStatus.toLowerCase() == "stalled";
                position.innerText = result.position;
                bkg_progress.innerText = result.backgroundProgress;
                bkg_completed.innerText = result.isBackgroundExecutionCompleted;
                for (item of result.result) {
                    let new_row = results_table.lastElementChild.cloneNode(true);
                    new_row.children[0].innerText = item.number;
                    new_row.children[1].innerText = item.name;
                    new_row.children[2].innerText = item.data;
                    results_table.append(new_row);
                    results_table.lastElementChild.scrollIntoView();
                }
                schedulePoll();
                if (!pollActive) back_status.innerText = "@Model.RUNNER_COMPLETED";
            }
            else {
                if (responce.status == 404) back_status.innerText = "The runner is not availble anymore.";
                else back_status.innerText = "Failed to contact serer, HTTP status code is " + responce.status;
            }
            test_result.innerText = JSON.stringify(result);
        }

        function schedulePoll() {
            if (pollActive) setTimeout(getAvailable, pollInterval);
        }

        window.onload = schedulePoll;

    </script>
    <style>
        div.records {display:inline-block; font-weight:600}
        td.number, td.name, td.data {min-width: 5em}
        div.name, div.data {min-width: 5.5em}
        div.number {padding-left:0.2em;min-width: 5.3em}
    </style>
}
